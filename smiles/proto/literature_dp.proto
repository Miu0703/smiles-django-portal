/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache LicenseVersion 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing;
 * software distributed under the License is distributed on an
 * "AS IS" BASIS WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

syntax = "proto3";

package smiles.model.lit;

message LiteratureDP {
  string data_product_id = 1;
  optional string parent_data_product_id = 2;
  optional string name = 3;

  optional string note = 4;
  optional string user = 5;
  optional string search_keywords = 6;
  optional int32 search_keywords_count = 7;
  optional string redox_info = 8;
  optional Biblio biblio = 9;
  repeated Record records = 10;
}

message Biblio {
  optional string doi = 1;
  optional string published_date = 2;
  optional string title = 3;
  optional string publisher = 4;
  optional string html_info = 5;
  repeated string authors = 6;
  optional string corresponding_author = 7;
  optional string corresponding_address = 8;
  optional string journal_reference = 9;    // Journal id - volume - starting page number
}

message Record {
  optional string smiles = 1;
  optional string dye_family = 2; // Values - Acridinium, Pyrylium, Cyanine, Quinolinium, Rhodamine, etc.
  optional bytes structure = 3;
  repeated string other_names = 4;
  optional bool smiles_validation_failed = 5;
  optional ElectroChemicalPotential electrochemical_potential = 6;
  optional FluorescenceLifetime fluorescence_lifetime = 7;
  optional SpectralData spectral_data = 8;
  repeated string related_records = 9;
  optional double molecular_weight = 10;

}

message ElectroChemicalPotential {
  optional Cathodic cathodic = 1;
  optional Anodic anodic = 2;
  optional string value_quoted_ref = 3;
  optional string data_measured_ref = 4;
  optional string method = 5;
  optional double temperature = 6;
  optional string data_type = 7; // Values - Table, Text, Figure, or SI
  optional bool json_extraction_completed = 8;
  optional string human_validator = 9; // Name of the human validator
  optional string elec_val_status_red = 10; // Electrochemistry Validation status for reduction. Values - HQ, MQ, or, LQ
  optional string elec_val_status_ox = 11; // Electrochemistry Validation status for oxidation. Values - HQ, MQ, or, LQ
}


message Cathodic {
  optional double red_v = 1; // Red / V
  optional string hw_or_pk = 2;
  optional string solvent = 3;
  optional string electrolyte = 4;
}

message Anodic {
  optional double ox_v = 1; // Ox / V
  optional string hw_or_pk = 2;
  optional string solvent = 3;
  optional string electrolyte = 4;
}

message FluorescenceLifetime {
  optional string solvent = 1;
  optional double temperature = 2;
  optional string units = 3;
  optional double value = 4;
}

message SpectralData {
  optional string solvent = 1;
  optional double absorb_max_nm = 2;
  optional double emis_max_nm = 3;
  repeated double lifetime = 4;
  optional double quantum_yield = 5;
  optional double molar_absorb_coefficient = 6;
  optional EmisnSpectra emisn_spectra = 7;
  optional AbsorpSpectra absorp_spectra = 8;
}

message EmisnSpectra {
  repeated Peak peaks = 1;
  optional string solvent = 2;
  optional double temperature = 3;
  optional string temperature_units = 4;
  optional double emission_fwhm_nm = 5; // Emission FWHM in nm
}

message AbsorpSpectra {
  repeated Peak peaks = 1;
  optional string solvent = 2;
  optional double temperature = 3;
  optional string temperature_units = 4;
  optional double absorption_fwhm_nm = 5; // Absorption FWHM in nm
}

message Peak {
  optional int32 extinction = 1;
  optional string extinction_units = 2;
  optional string units = 3;
  optional double value = 4;
  optional bool value_validation_failed = 5;
  optional bool extinction_validation_failed = 6;
}
